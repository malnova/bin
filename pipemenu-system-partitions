#!/bin/bash
. pipemenu-default-commands
. pipemenu-system-functions

# Fonction pour convertir des octets en kibioctets, mébioctets, gibioctets et tébioctets
convert_binary() {
    local str="$@"
    divide_by_T=$(( 1024 ** 4 ))
    divide_by_G=$(( 1024 ** 3 ))
    divide_by_M=$(( 1024 ** 2 ))
    divide_by_k=$(( 1024 ))
        if [ "$str" -gt "$divide_by_T" ]; then
            value=$(echo "scale=1; ($str + ($divide_by_T / 20)) / $divide_by_T" | bc)
            unit="Tio"
        elif [ "$str" -gt "$divide_by_G" ]; then
            value=$(echo "scale=1; ($str + ($divide_by_G / 20)) / $divide_by_G" | bc)
            unit="Gio"
        elif [ "$str" -gt "$divide_by_M" ]; then
            value=$(echo "scale=1; ($str + ($divide_by_M / 20)) / $divide_by_M" | bc)
            unit="Mio"
        elif [ "$str" -gt "$divide_by_k" ]; then
            value=$(echo "scale=1; ($str + ($divide_by_k / 20)) / $divide_by_k" | bc)
            unit="Kio"
        else
            value="$str"
            unit="o"
        fi
        if [[ "$value" =~ ".0" ]]; then
            value=$(echo "$value" | cut -f1 -d".")
        fi
        echo "${value/./,} $unit"
}

echo "<openbox_pipe_menu>"

unset is_partition partition_disk_name partition_disk_fullsize partition_disk_size
while IFS= read -r line; do
    is_partition=1
    partition_disk_name=$(${default_path}lsblk -dno MODEL "$line" | sed 's/_/ /g')
    if [ -z "$partition_disk_name" ]; then
        partition_disk_name="$line"
    fi
    partition_disk_name=$(sanitize_output "$partition_disk_name")
    partition_disk_fullsize=$(${default_path}lsblk -bdno SIZE "$line")
    partition_disk_size=$(convert_binary "$partition_disk_fullsize")
    echo "<separator label=\"$partition_disk_name ($partition_disk_size)\" />"
    partition_nb=0
    unset partition partition_mountpoint partition_name
    while IFS= read -r partition; do
        partition_mountpoint=$(${default_path}lsblk -npo MOUNTPOINT "$partition" | head -n1)
        if [ ! -z "$partition_mountpoint" ]; then
            if [ "$partition_nb" -gt 0 ]; then
                echo "<separator />"
            fi
            partition_nb=1
            partition_name=$(sanitize_output "$partition")
            echo "<item label=\"Partition : $partition_name\" />"
            unset partition_fstype partition_parttypename
            partition_fstype=$(${default_path}lsblk -npo FSTYPE "$partition")
            partition_parttypename=$(${default_path}lsblk -npo PARTTYPENAME "$partition")
            if [ ! -z "$partition_fstype" ] && [ ! -z "$partition_parttypename" ]; then
                partition_fstype=$(sanitize_output "$partition_fstype")
                partition_parttypename=$(sanitize_output "$partition_parttypename")
                echo "<item label=\"Système de fichiers : $partition_fstype ($partition_parttypename)\" />"
            elif [ ! -z "$partition_fstype" ]; then
                partition_fstype=$(sanitize_output "$partition_fstype")
                echo "<item label=\"Système de fichiers : $partition_fstype\" />"
            fi
            partition_mountpoint=$(sanitize_output "$partition_mountpoint")
            echo "<item label=\"Point de montage : $partition_mountpoint\" />"
            unset partition_label
            partition_label=$(${default_path}lsblk -npo LABEL "$partition")
            if [ ! -z "$partition_label" ]; then
                partition_label=$(sanitize_output "$partition_label")
                echo "<item label=\"Étiquette : $partition_label\" />"
            fi
            unset partition_fsused partition_fssize partition_fsuse_percent partition_size
            partition_fsused=$(${default_path}lsblk -bnpo FSUSED "$partition")
            partition_fssize=$(${default_path}lsblk -bnpo FSSIZE "$partition")
            partition_fsuse_percent=$(${default_path}lsblk -bnpo FSUSE% "$partition")
            if [ ! -z "$partition_fsused" ] && [ ! -z "$partition_fssize" ] && [ ! -z "$partition_fsuse_percent" ]; then
                partition_fsused=$(convert_binary "$partition_fsused")
                partition_fssize=$(convert_binary "$partition_fssize")
                partition_fsuse_percent=$(sanitize_output "$partition_fsuse_percent")
                echo "<item label=\"Taille : $partition_fsused utilisés sur $partition_fssize (${partition_fsuse_percent})\" />"
            else
                partition_size=$(${default_path}lsblk -bnpo SIZE "$partition")
                partition_size=$(convert_binary "$partition_size")
                echo "<item label=\"Taille : $partition_size\" />"
            fi
        fi
    done < <(${default_path}lsblk -npo KNAME "$line")
    unset partition partition_size partition_disk_used partition_unallocated_space partition_unallocated_percent
    while IFS= read -r partition; do
        partition_size=$(echo "$partition" | awk '{print $1}' | grep -Eo '[0-9]+')
        partition_disk_used=$(( partition_disk_used + partition_size ))
    done < <(${default_path}lsblk -bnpo SIZE,TYPE "$line" | grep ' part')
    partition_unallocated_space=$(( partition_disk_fullsize - partition_disk_used ))
    partition_unallocated_percent=$(echo "scale=2; $partition_unallocated_space / $partition_disk_fullsize * 100" | bc)
    if [ "$partition_unallocated_space" -gt 0 ] && (( $(echo "$partition_unallocated_percent 0.01" | awk '{print ($1 > $2)}') )); then
        partition_unallocated_space=$(convert_binary "$partition_unallocated_space")
        if [ "$partition_nb" -gt 0 ]; then
            echo "<separator />"
        fi
        echo "<item label=\"Espace non alloué : $partition_unallocated_space\" />"
    fi
done < <(${default_path}lsblk -dno PATH)

if [ -z "$is_partition" ]; then
    echo "<item label=\"Aucune partition détectée.\" />"
fi

echo "<separator />"
echo "<item label=\"Afficher une vue d'ensemble\"><action name=\"Execute\"><command>$(display_file "${default_path}lsblk -o NAME,MODEL,TYPE,FSTYPE,LABEL,SIZE,FSAVAIL,MOUNTPOINT")</command></action></item>"
echo "<item label=\"Afficher les UUIDs\"><action name=\"Execute\"><command>$(display_file "${default_path}lsblk -o NAME,TYPE,FSTYPE,LABEL,UUID,MOUNTPOINT")</command></action></item>"
echo "<item label=\"Afficher toutes les partitions\"><action name=\"Execute\"><command>$(display_file "${default_path}df -h --output=source,fstype,size,used,avail,pcent,file,target")</command></action></item>"

echo "</openbox_pipe_menu>"
