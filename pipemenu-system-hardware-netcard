#!/bin/bash
. pipemenu-default-commands
. pipemenu-system-functions

echo "<openbox_pipe_menu>"

unset is_netcard
if [ -e "${default_path}hwinfo" ]; then
    # Requiert l'installation du paquet hwinfo
    unset netcards
    netcards="$(${default_path}hwinfo --netcard | sed -e '$a\ ' | awk -v RS="" -F'\n' -v OFS=" -,-,- " '{$1=$1} 1' | sed -r "s/ +([[:digit:]-]+)$/, \1/; s/ -,-,- +/${end_delimiter}/g" | grep -E '^[0-9]+: ' | sed 's/[^ ]* //' | sort)"
    netcard_nb=0
    while IFS= read -r line; do
        declare -a netcard_connector
        netcard_connector[$netcard_nb]=$(echo "$line" | grep -ioP '^\s*\K.*' | awk '{print $1}')
        if [ ! -z "${netcard_connector[$netcard_nb]}" ]; then
            is_netcard=1
            netcard_connector[$netcard_nb]=$(sanitize_output "${netcard_connector[$netcard_nb]}")
            if [ "$netcard_nb" -eq 0 ] || [ "${netcard_connector[$netcard_nb]}" != "${netcard_connector[$netcard_nb-1]}" ]; then
                echo "<separator label=\"Port ${netcard_connector[netcard_nb]}\" />"
            elif [ "$z" -gt 0 ]; then
                z=0
                echo "<separator />"
            fi
            z=$((z+1))
            netcard_nb=$((netcard_nb+1))
        fi
        unset netcard_model
        netcard_model=$(str_str "$line" "Model:")
        if [ ! -z "$netcard_model" ]; then
            is_netcard=1
            netcard_model=$(sanitize_output "$netcard_model")
            echo "<item label=\"Modèle : $netcard_model\" />"
            z=$((z+1))
        fi
        unset netcard_vendor
        netcard_vendor=$(str_str "$line" "Vendor:")
        if [ ! -z "$netcard_vendor" ]; then
            is_netcard=1
            netcard_vendor=$(sanitize_output_with_quotes "$netcard_vendor")
            echo "<item label=\"Fabricant : $netcard_vendor\" />"
            z=$((z+1))
        fi
        unset netcard_device_file
        netcard_device_file=$(str_str "$line" "Device File:")
        if [ ! -z "$netcard_device_file" ]; then
            is_netcard=1
            netcard_device_file=$(sanitize_output "$netcard_device_file")
            unset netcard_nm_properties netcard_type netcard_state
            if [ -e "${default_path}nmcli" ]; then
                netcard_nm_properties=$(${default_path}nmcli -f GENERAL,WIFI-PROPERTIES dev show $netcard_device_file)
                if [ ! -z "$netcard_nm_properties" ]; then
                    netcard_type=$(echo "$netcard_nm_properties" | sed -n -e 's/^GENERAL.TYPE://p')
                    if [ ! -z "$netcard_type" ]; then
                        netcard_type=$(sanitize_output "$netcard_type")
                        echo "<item label=\"Type : $netcard_type\" />"
                    fi
                    netcard_state=$(echo "$netcard_nm_properties" | sed -n -e 's/^GENERAL.STATE://p')
                    if [ ! -z "$netcard_state" ]; then
                        netcard_state=$(sanitize_output "$netcard_state")
                        echo "<item label=\"État : $netcard_state\" />"
                    fi
                fi
            fi
            echo "<item label=\"Interface : $netcard_device_file\" />"
            z=$((z+1))
            unset netcard_speed
            if [[ $netcard_device_file =~ ^wl ]] || [[ $netcard_device_file =~ ^ww ]]; then
                if [ ! -z "$netcard_nm_properties" ]; then
                    unset netcard_2GHZ netcard_5GHZ netcard_frequencies
                    netcard_2GHZ=$(echo "$netcard_nm_properties" | sed -n -e 's/^WIFI-PROPERTIES.2GHZ://p')
                    netcard_5GHZ=$(echo "$netcard_nm_properties" | sed -n -e 's/^WIFI-PROPERTIES.5GHZ://p')
                    if [[ $netcard_2GHZ == *"oui"* ]] && [[ $netcard_5GHZ == *"oui"* ]]; then
                        netcard_frequencies="2,4 GHz et 5 GHz"
                    elif [[ $netcard_2GHZ == *"oui"* ]]; then
                        netcard_frequencies="2,4 GHz (5 GHz non disponible)"
                    elif [[ $netcard_5GHZ == *"oui"* ]]; then
                        netcard_frequencies="5 GHz (2,4 GHz non disponible)"
                    fi
                    if [ ! -z "$netcard_frequencies" ]; then
                        netcard_frequencies=$(sanitize_output "$netcard_frequencies")
                        echo "<item label=\"Spectre de radiofréquences : $netcard_frequencies\" />"
                    fi
                fi
            fi
            if [ -z "$netcard_speed" ]; then
                netcard_speed=$(cat /sys/class/net/${netcard_device_file}/speed 2>/dev/null)
                if [ ! -z "$netcard_speed" ]; then
                    netcard_speed=$(sanitize_output "$netcard_speed")
                    if [[ $netcard_speed =~ ^[0-9]+$ ]]; then
                        netcard_speed=$(echo "${netcard_speed} Mbps")
                    fi
                    echo "<item label=\"Vitesse : $netcard_speed\" />"
                fi
            fi
        fi
        unset netcard_driver
        netcard_driver=$(str_str "$line" "Driver:" | sed 's/\", \"/\",\"/g')
        if [ ! -z "$netcard_driver" ]; then
            netcard_driver=$(sanitize_output "$netcard_driver")
        fi
        unset netcard_driver_status_all
        netcard_driver_status_all=$(str_str "$line" "Driver Status:")
        unset netcard_driver_status netcard_status
        if [ ! -z "$netcard_driver_status_all" ]; then
            unset status
            while read status; do
                unset driver_new
                if [[ "$status" =~ "is active" ]]; then
                    driver_new=$(echo "$status" | sed 's/is active//g')
                    driver_new=$(sanitize_output "$driver_new")
                    netcard_driver_status=$(echo "$netcard_driver_status,$driver_new")
                    netcard_status=$(echo "$netcard_status,$driver_new actif")
                elif [[ "$status" =~ "are active" ]]; then
                    driver_new=$(echo "$status" | sed 's/are active//g')
                    driver_new=$(sanitize_output "$driver_new")
                    netcard_driver_status=$(echo "$netcard_driver_status,$driver_new")
                    netcard_status=$(echo "$netcard_status,$driver_new actifs")
                elif [[ "$status" =~ "is not active" ]]; then
                    driver_new=$(echo "$status" | sed 's/is not active//g')
                    driver_new=$(sanitize_output "$driver_new")
                    netcard_driver_status=$(echo "$netcard_driver_status,$driver_new")
                    netcard_status=$(echo "$netcard_status,$driver_new inactif")
                elif [[ "$status" =~ "are not active" ]]; then
                    driver_new=$(echo "$status" | sed 's/are not active//g')
                    driver_new=$(sanitize_output "$driver_new")
                    netcard_driver_status=$(echo "$netcard_driver_status,$driver_new")
                    netcard_status=$(echo "$netcard_status,$driver_new inactifs")
                fi
                netcard_driver_status=$(echo "$netcard_driver_status" | sed -e 's/^[,]*//')
                netcard_status=$(echo "$netcard_status" | sed -e 's/^[,]*//')
            done <<< "$netcard_driver_status_all"
        fi
        unset netcard_driver_modules
        netcard_driver_modules=$(str_str "$line" "Driver Modules:")
        if [ ! -z "$netcard_driver_modules" ]; then
            netcard_driver_modules=$(sanitize_output "$netcard_driver_modules")
        fi
        if [ -z "$netcard_driver" ] && [ ! -z "$netcard_driver_status" ]; then
            is_netcard=1
            echo "<item label=\"Driver(s) : $netcard_driver_status\" />"
            z=$((z+1))
        elif [ ! -z "$netcard_driver" ] && [ -z "$netcard_driver_status" ]; then
            is_netcard=1
            echo "<item label=\"Driver(s) : $netcard_driver\" />"
            z=$((z+1))
        elif [ ! -z "$netcard_driver" ] && [ ! -z "$netcard_driver_status" ] && [ "$netcard_driver" == "$netcard_driver_status" ]; then
            is_netcard=1
            echo "<item label=\"Driver(s) : $netcard_driver\" />"
            z=$((z+1))
        elif [ ! -z "$netcard_driver" ] && [ ! -z "$netcard_driver_status" ] && [ "$netcard_driver" != "$netcard_driver_status" ]; then
            is_netcard=1
            netcard_driver=$(echo "$netcard_driver ($netcard_driver_status)")
            echo "<item label=\"Driver(s) : $netcard_driver\" />"
            z=$((z+1))
        fi
        if [ ! -z "$netcard_driver_modules" ]; then
            is_netcard=1
            echo "<item label=\"Module(s) : $netcard_driver_modules\" />"
            z=$((z+1))
        fi
        if [ ! -z "$netcard_status" ]; then
            is_netcard=1
            echo "<item label=\"État : $netcard_status\" />"
            z=$((z+1))
        fi
    done <<< "$netcards"
    if [ ! -z "$is_netcard" ]; then
        echo "<separator />"
        echo "<item label=\"Afficher un aperçu rapide\"><action name=\"Execute\"><command>$(display_file "${default_path}hwinfo --short --netcard")</command></action></item>"
        echo "<item label=\"Afficher les informations complètes\"><action name=\"Execute\"><command>$(display_file "${default_path}hwinfo --netcard")</command></action></item>"
    fi
fi

if [ -z "$is_netcard" ]; then
    echo "<item label=\"Aucune carte réseau détectée.\" />"
fi

echo "</openbox_pipe_menu>"
