#!/bin/bash
. pipemenu-default-commands
. pipemenu-system-functions

# Fonction pour convertir des octets en kilooctets, mégaoctets, gigaoctets et téraoctets
convert_decimal() {
    local str="$@"
    divide_by_T=$(( 1000 ** 4 ))
    divide_by_G=$(( 1000 ** 3 ))
    divide_by_M=$(( 1000 ** 2 ))
    divide_by_k=$(( 1000 ))
        if [ "$str" -gt "$divide_by_T" ]; then
            value=$(echo "scale=1; ($str + ($divide_by_T / 20)) / $divide_by_T" | bc)
            unit="To"
        elif [ "$str" -gt "$divide_by_G" ]; then
            value=$(echo "scale=1; ($str + ($divide_by_G / 20)) / $divide_by_G" | bc)
            unit="Go"
        elif [ "$str" -gt "$divide_by_M" ]; then
            value=$(echo "scale=1; ($str + ($divide_by_M / 20)) / $divide_by_M" | bc)
            unit="Mo"
        elif [ "$str" -gt "$divide_by_k" ]; then
            value=$(echo "scale=1; ($str + ($divide_by_k / 20)) / $divide_by_k" | bc)
            unit="ko"
        else
            value="$str"
            unit="o"
        fi
        if [[ "$value" =~ ".0" ]]; then
            value=$(echo "$value" | cut -f1 -d".")
        fi
        echo "${value/./,} $unit"
}

echo "<openbox_pipe_menu>"

unset is_disk
if [ -e "${default_path}hwinfo" ]; then
    # Requiert l'installation du paquet hwinfo
    unset disks block_devices
    disks="$(${default_path}hwinfo --disk | sed -e '$a\ ' | awk -v RS="" -F'\n' -v OFS=" -,-,- " '{$1=$1} 1' | sed -r "s/ +([[:digit:]-]+)$/, \1/; s/ -,-,- +/${end_delimiter}/g" | grep -E '^[0-9]+: ' | sed 's/[^ ]* //' | sort)"
    block_devices=$(lsblk -dn 2>/dev/null)
    disk_nb=0
    while IFS= read -r line; do
        unset disk_device_file disk_device_file_suffix
        disk_device_file=$(str_str "$line" "Device File:")
        if [ ! -z "$disk_device_file" ]; then
            disk_device_file=$(sanitize_output "$disk_device_file")
            disk_device_file_suffix=$(echo $disk_device_file | grep -oP "^/dev/\K.*" | cut -d ' ' -f1)
            if [[ "$block_devices" == *"$disk_device_file_suffix "* ]]; then
                is_disk=1
                z=$((z+1))
                declare -a disk_connector
                disk_connector[$disk_nb]=$(echo "$line" | grep -ioP '^\s*\K.*' | awk '{print $1}')
                if [ ! -z "${disk_connector[$disk_nb]}" ]; then
                    disk_connector[$disk_nb]=$(sanitize_output "${disk_connector[$disk_nb]}")
                    if [ "$disk_nb" -eq 0 ] || [ "${disk_connector[$disk_nb]}" != "${disk_connector[$disk_nb-1]}" ]; then
                        echo "<separator label=\"Port ${disk_connector[disk_nb]}\" />"
                    elif [ "$z" -gt 0 ]; then
                        z=0
                        echo "<separator />"
                    fi
                    disk_nb=$((disk_nb+1))
                fi
                unset skdump_output disk_model
                skdump_output=$(sudo ${default_path}skdump "$disk_device_file" 2>/dev/null)
                disk_model=$(echo "$skdump_output" | grep -oP '(?<=^Model:[[:space:]]\[).*?(?=\])')
                if [ ! -z "$disk_model" ]; then
                    disk_model=$(sanitize_output "$disk_model")
                    echo "<item label=\"Modèle : $disk_model\" />"
                else
                    disk_model=$(str_str "$line" "Model:")
                    if [ ! -z "$disk_model" ]; then
                        disk_model=$(sanitize_output "$disk_model")
                        echo "<item label=\"Modèle : $disk_model\" />"
                    fi
                fi
                unset disk_vendor
                disk_vendor=$(str_str "$line" "Vendor:")
                if [ ! -z "$disk_vendor" ]; then
                    disk_vendor=$(sanitize_output_with_quotes "$disk_vendor")
                    if [ "$disk_vendor" = "WDC" ]; then
                        disk_vendor="WDC (Western Digital Corporation)"
                    fi
                    echo "<item label=\"Fabricant : $disk_vendor\" />"
                fi
                unset disk_serial
                disk_serial=$(udevadm info --query=all --name=$disk_device_file_suffix | grep ID_SERIAL_SHORT | sed -n -e 's/^.*ID_SERIAL_SHORT=//p' 2>/dev/null)
                if [ ! -z "$disk_serial" ]; then
                    disk_serial=$(sanitize_output "$disk_serial")
                    echo "<item label=\"N° de série : $disk_serial\" />"
                fi
                unset disk_type disk_type_temp
                if [[ $disk_device_file_suffix == *"mmcblk"* ]]; then
                    disk_type="carte SD / MMC / eMMC"
                elif [[ $disk_device_file_suffix == *"nvme"* ]]; then
                    disk_type="disque SSD"
                else
                    disk_type_temp=$(find /dev/disk/by-path/ -lname "*${disk_device_file_suffix}")
                    if [[ $disk_type_temp == *"usb-"* ]]; then
                        disk_type="périphérique USB"
                    else
                        disk_type_temp=$(lsblk -dno ROTA $disk_device_file 2>/dev/null)
                        if [ ! -z "$disk_type_temp" ]; then
                            disk_type_temp=$(echo -e "${disk_type_temp}" | tr -d '[:space:]')
                            if [ "$disk_type_temp" == "0" ]; then
                                disk_type="disque SSD"
                            elif [ "$disk_type_temp" == "1" ]; then
                                disk_type="disque HDD"
                            fi
                        fi
                    fi
                fi
                echo "<item label=\"Fichier : $disk_device_file\" />"
                if [ ! -z "$disk_type" ]; then
                    disk_type=$(sanitize_output "$disk_type")
                    echo "<item label=\"Type : $disk_type\" />"
                fi
                unset disk_bad_sectors
                disk_bad_sectors=$(echo "$skdump_output" | sed -n 's/^Bad Sectors: //p' | grep -Eo '[0-9]+')
                if [ ! -z "$disk_bad_sectors" ]; then
                    disk_bad_sectors=$(sanitize_output "$disk_bad_sectors")
                    echo "<item label=\"Secteurs défectueux : $disk_bad_sectors\" />"
                fi
                unset disk_overall_status
                disk_overall_status=$(echo "$skdump_output" | sed -n 's/^Overall Status: //p')
                if [ ! -z "$disk_overall_status" ]; then
                    if [[ "$disk_overall_status" =~ "BAD" ]]; then
                        disk_overall_status=$(sanitize_output "$disk_overall_status")
                        disk_overall_status="MAUVAIS ($disk_overall_status) !"
                    elif [[ "$disk_overall_status" =~ "GOOD" ]]; then
                        disk_overall_status="SAIN"
                    else
                        disk_overall_status=$(sanitize_output "$disk_overall_status")
                    fi
                    echo "<item label=\"État général : $disk_overall_status\" />"
                fi
                unset disk_capacity
                disk_capacity=$(lsblk -dno SIZE $disk_device_file 2>/dev/null)
                disk_capacity_bytes=$(lsblk -bdno SIZE $disk_device_file 2>/dev/null)
                if [ ! -z "$disk_capacity" ] && [ ! -z "$disk_capacity_bytes" ]; then
                    disk_capacity_unit=$(echo "$disk_capacity" | grep -Eo '[A-Z]' | sed 's/T/Tio/;s/G/Gio/;s/M/Mio/;s/K/Kio/;s/B/o/')
                    disk_capacity=$(echo "$disk_capacity" | grep -Eo '[0-9,.]+')
                    disk_capacity_bytes=$(convert_decimal "$disk_capacity_bytes")
                    echo "<item label=\"Capacité : $disk_capacity $disk_capacity_unit ($disk_capacity_bytes)\" />"
                fi
                unset disk_driver
                disk_driver=$(str_str "$line" "Driver:" | sed 's/\", \"/\",\"/g')
                if [ ! -z "$disk_driver" ]; then
                    disk_driver=$(sanitize_output "$disk_driver")
                fi
                unset disk_driver_status_all
                disk_driver_status_all=$(str_str "$line" "Driver Status:")
                unset disk_driver_status disk_status
                if [ ! -z "$disk_driver_status_all" ]; then
                    unset status
                    while read status; do
                        unset driver_new
                        if [[ "$status" =~ "is active" ]]; then
                            driver_new=$(echo "$status" | sed 's/is active//g')
                            driver_new=$(sanitize_output "$driver_new")
                            disk_driver_status=$(echo "$disk_driver_status,$driver_new")
                            disk_status=$(echo "$disk_status,$driver_new actif")
                        elif [[ "$status" =~ "are active" ]]; then
                            driver_new=$(echo "$status" | sed 's/are active//g')
                            driver_new=$(sanitize_output "$driver_new")
                            disk_driver_status=$(echo "$disk_driver_status,$driver_new")
                            disk_status=$(echo "$disk_status,$driver_new actifs")
                        elif [[ "$status" =~ "is not active" ]]; then
                            driver_new=$(echo "$status" | sed 's/is not active//g')
                            driver_new=$(sanitize_output "$driver_new")
                            disk_driver_status=$(echo "$disk_driver_status,$driver_new")
                            disk_status=$(echo "$disk_status,$driver_new inactif")
                        elif [[ "$status" =~ "are not active" ]]; then
                            driver_new=$(echo "$status" | sed 's/are not active//g')
                            driver_new=$(sanitize_output "$driver_new")
                            disk_driver_status=$(echo "$disk_driver_status,$driver_new")
                            disk_status=$(echo "$disk_status,$driver_new inactifs")
                        fi
                        disk_driver_status=$(echo "$disk_driver_status" | sed -e 's/^[,]*//')
                        disk_status=$(echo "$disk_status" | sed -e 's/^[,]*//')
                    done <<< "$disk_driver_status_all"
                fi
                unset disk_driver_modules
                disk_driver_modules=$(str_str "$line" "Driver Modules:")
                if [ ! -z "$disk_driver_modules" ]; then
                    disk_driver_modules=$(sanitize_output "$disk_driver_modules")
                fi
                if [ -z "$disk_driver" ] && [ ! -z "$disk_driver_status" ]; then
                    echo "<item label=\"Driver(s) : $disk_driver_status\" />"
                elif [ ! -z "$disk_driver" ] && [ -z "$disk_driver_status" ]; then
                    echo "<item label=\"Driver(s) : $disk_driver\" />"
                elif [ ! -z "$disk_driver" ] && [ ! -z "$disk_driver_status" ] && [ "$disk_driver" == "$disk_driver_status" ]; then
                    echo "<item label=\"Driver(s) : $disk_driver\" />"
                elif [ ! -z "$disk_driver" ] && [ ! -z "$disk_driver_status" ] && [ "$disk_driver" != "$disk_driver_status" ]; then
                    disk_driver=$(echo "$disk_driver ($disk_driver_status)")
                    echo "<item label=\"Driver(s) : $disk_driver\" />"
                fi
                if [ ! -z "$disk_driver_modules" ]; then
                    echo "<item label=\"Module(s) : $disk_driver_modules\" />"
                fi
                if [ ! -z "$disk_status" ]; then
                    echo "<item label=\"État : $disk_status\" />"
                fi
            fi
        fi
    done <<< "$disks"
    if [ ! -z "$is_disk" ]; then
        echo "<separator />"
        echo "<item label=\"Afficher un aperçu rapide\"><action name=\"Execute\"><command>$(display_file "${default_path}hwinfo --short --disk")</command></action></item>"
        echo "<item label=\"Afficher les informations complètes\"><action name=\"Execute\"><command>$(display_file "${default_path}hwinfo --disk")</command></action></item>"
    fi
fi

if [ -z "$is_disk" ]; then
    echo "<item label=\"Aucun disque détecté.\" />"
fi

echo "</openbox_pipe_menu>"
