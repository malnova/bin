#!/bin/bash
# Inspiré par pacnanny : https://github.com/brandoninvergo/pacnanny
[ -z "$1" ] && news_nb=3 || news_nb="$1"
date_format='%Y-%m-%d %H:%M:%S'
mirror_file="/etc/pacman.d/mirrorlist"
mirrors_status_page="https://archlinux.org/mirrors/status/"
update_command="/usr/bin/trizen -Syu"
news_url="https://archlinux.org/feeds/news/"
pacman_log='/var/log/pacman.log'
bold=$(tput bold)
italic=$(tput sitm)
reset=$(tput sgr0)
yellow='\033[1;33m'
nocolor='\033[0m'
indent_width='3'
printf -v tab '%*s' $indent_width

last_update_date=$(grep '.*upgraded.*(.*)$\|starting full system upgrade' $pacman_log | tail -n1 | grep -o -E "[-0-9\]*T[:0-9]*\+[0-9]+")
last_update_ts=$(TZ=UTC date -d "$last_update_date" '+%s')

# Afficher les dernières actualités depuis archlinux.org
display_news() {
    echo -e "\033[1;34m::\033[0m ${bold}Récupération des nouvelles d'Arch Linux…${reset}"
    news=$(curl --fail --silent --show-error --connect-timeout 10 --max-time 15 --retry 1 --retry-delay 0 "$news_url")
    if [ $? -eq 0 ]; then
        IFS=$'\n'
        # Reformater le flux RSS pour que chaque item soit sur une ligne
        items=$(echo $news | tr -d '\n' | sed -e 's|<item>|\n<item>|g')
        while IFS= read -r item; do
            pubDate_date=$(echo "$item" | sed -e 's/.*<pubDate>\(.*\)<\/pubDate>.*/\1/')
            pubDate_ts=$(TZ=UTC date -d "$pubDate_date" '+%s')
            pubDate_readable=$(TZ=CET date -d "@$pubDate_ts" "+$date_format")
            title=$(echo "$item" | sed -e 's/.*<title>\(.*\)<\/title>.*/\1/' | perl -MHTML::Entities -pe 'decode_entities($_);')
            creator=$(echo "$item" | sed -e 's/.*<dc:creator.*>\(.*\)<\/dc:creator>.*/\1/')
            if [ "$pubDate_ts" -ge "$last_update_ts" ]; then
                echo -e " ${bold}${yellow}${pubDate_readable} ${title} (${creator})${nocolor}${reset}"
                description=$(echo "$item" | sed -e 's/.*<description>\(.*\)<\/description>.*/\1/' | perl -MHTML::Entities -pe 'decode_entities($_);')
                # Remplacer les balises de liens <a href=""> par la couleur bleue
                description=$(echo "$description" | sed 's/<a href="[^>]*>/\\033[1;34m/g;s/<\/a>/\\033[0m/g')
                # Remplacer les balises <code> par la couleur verte
                description=$(echo "$description" | sed 's/<code>/\\033[1;32m/g;s/<\/code>/\\033[0m/g')
                # Remplacer les balises <strong> par une mise en gras
                description=$(echo "$description" | sed "s/<strong>/$bold/g;s/<\/strong>/$reset/g")
                # Remplacer les balises <em> par une mise en italique
                description=$(echo "$description" | sed "s/<em>/$italic/g;s/<\/em>/$reset/g")
                # Remplacer les balises <li>
                description=$(echo "$description" | sed "s/<li>/$tab• /g")
                # Remplacer les balises <br>, </p>, </pre> et </li> par un saut de ligne
                description=$(echo "$description" | sed "s/<br>/\\n/g;s/<br \/>/\\n/g;s/<\/p> /\\n/g;s/<\/pre> /\\n/g;s/<\/li> /\\n/g")
                # Supprimer toutes les autres balises HTML et l'espace surnuméraire éventuel qui suit
                description=$(echo "$description" | sed -e 's/<[^>]*>\s\?//g')
                # Convertir les caractères HTML restants
                description=$(echo "$description" | perl -MHTML::Entities -pe 'decode_entities($_);')
                # Afficher le texte avec indentation
                columns="$(($(tput cols)-$indent_width))"
                echo -e "$description" | fmt -sw "$columns" | awk '{printf "'$tab'"$0"\n"}'
            else
                echo " $pubDate_readable $title ($creator)"
            fi
        done < <(echo "$items" | grep -oP '(?<=<item>).*(?=</item)' | head -n "$news_nb")
    else
        echo -e "${bold}${yellow}Erreur : problème lors du chargement de la page ${news_url}.${nocolor}${reset}"
    fi
}

# Vérifier si les miroirs sont à jour
check_mirror_status() {
    echo -e "\033[1;34m::\033[0m ${bold}Récupération des informations sur les miroirs…${reset}"
    # Récupérer les adresses des miroirs non à jour
    mirrors_status=$(curl --fail --silent --show-error --connect-timeout 10 --max-time 15 --retry 1 --retry-delay 0 "$mirrors_status_page")
    if [ $? -eq 0 ]; then
        mirrors_status=$(echo "$mirrors_status" | sed -n '/<table id="outofsync_mirrors"/,/<\/table>/p' | grep -o 'http[s]*://[^"]*\|rsync://[^"]*')
        # Supprimer les lignes blanches et les lignes commentées de la liste des miroirs
        mirrors=$(grep '^[^;#]' "$mirror_file" | sed 's/Server = //g')
        z=0
        while IFS= read -r line; do
            z=$((z+1))
            if [[ "$mirrors_status" == *"$line"* ]]; then
                if [ "$z" == "1" ]; then
                    echo -e " ${bold}${yellow}Le miroir principal ($line) n'est pas à jour !${nocolor}${reset}"
                    read -p " ${bold}Voulez-vous interrompre la mise à jour ?${reset} [O/n] : " answer
                    case $answer in
                        [Nn]) ;;
                        *) exit;;
                    esac
                else
                    echo -e " ${bold}${yellow}Le miroir $line n'est pas à jour !${nocolor}${reset}"
                fi
            else
                echo " Le miroir $line est à jour."
            fi
        done <<< "$mirrors"
    else
        echo -e "${bold}${yellow}Erreur : problème lors du chargement de la page ${mirrors_status_page}.${nocolor}${reset}"
    fi
}

finish() {
    # Affichage des fichiers .pacnew et .pacsave
    pacnews=$(echo "$pacman_log" | grep -o "[-0-9_/a-z\.]*.pacnew")
    if [ "x$pacnews" != "x" ]; then
        echo -e "${bold}${yellow}De nouveaux fichiers .pacnew ont été créés :\n${pacnews}${nocolor}${reset}"
    fi
    pacsaves=$(echo "$pacman_log" | grep -o "[-0-9_/a-z\.]*.pacsave")
    if [ "x$pacsaves" != "x" ]; then
        echo -e "${bold}${yellow}De nouveaux fichiers .pacsave ont été créés :\n${pacsaves}${nocolor}${reset}"
    fi

    # Récapitulatif des warnings
    warnings=$(echo "$pacman_log" | grep 'warning: ')
    if [ "x$warnings" != "x" ]; then
        echo -e "${bold}${yellow}Récapitulatif des warnings :\n${warnings}${nocolor}${reset}"
    fi
}
trap finish EXIT

# Lancer la mise à jour d'Arch
display_news
check_mirror_status
run_date=`date '+%Y-%m-%dT%H:%M'`
eval $update_command

# Récpuérer la partie du log de pacman correspondant à la dernière mise à jour
pacman_log=$(sed -n -e "/\[$run_date.*\] \[PACMAN\] Running '.*pacman.*'/,\${/.*/p}" "$pacman_log")

# Vérifier si certains paquets sont orphelins
while read -r line; do
    if [ ! -z "$line" ]; then
        has_deps=$( /usr/bin/pacman -Rcsp "$line" | wc -l )
        if [ $has_deps -eq 1 ]; then
            echo -e "${bold}Le paquet $line est orphelin et peut être supprimé : sudo pacman -Rcns ${line}${reset}"
        fi
    fi
done <<< "$( /usr/bin/pacman -Qtdq )"

# Nettoyage du cache de pacman (dans /var/cache/pacman/pkg/)
if command -v /usr/bin/paccache >/dev/null 2>&1; then
    if [ "$EUID" -eq 0 ]; then
        # Supprimer les fichiers du cache de pacman correspondant à des paquets non installés
        /usr/bin/paccache --remove --uninstalled --keep 0 1>/dev/null
        # Conserver seulement 1 archive pour les paquets installés (ne laisser
        # que 2 fichiers par paquet dans le cache de pacman : la version actuelle
        # + la version précédente)
        /usr/bin/paccache --remove --keep 2 1>/dev/null
    fi
else
    echo -e "${bold}${yellow}Le paquet pacman-contrib (fournissant la commande paccache) n'est pas installé. Le nettoyage du cache de pacman ne peut être effectué.${nocolor}${reset}"
fi
