#!/bin/bash
. pipemenu-default-commands
. pipemenu-system-functions

echo "<openbox_pipe_menu>"

unset is_bluetooth
if [ -e "${default_path}hwinfo" ]; then
    # Requiert l'installation du paquet hwinfo
    unset bluetooths
    bluetooths="$(${default_path}hwinfo --bluetooth | sed -e '$a\ ' | awk -v RS="" -F'\n' -v OFS=" -,-,- " '{$1=$1} 1' | sed -r "s/ +([[:digit:]-]+)$/, \1/; s/ -,-,- +/${end_delimiter}/g" | grep -E '^[0-9]+: ' | sed 's/[^ ]* //' | sort)"
    bluetooth_nb=0
    while IFS= read -r line; do
        declare -a bluetooth_connector
        bluetooth_connector[$bluetooth_nb]=$(echo "$line" | grep -ioP '^\s*\K.*' | awk '{print $1}')
        if [ ! -z "${bluetooth_connector[$bluetooth_nb]}" ]; then
            is_bluetooth=1
            bluetooth_connector[$bluetooth_nb]=$(sanityse_output "${bluetooth_connector[$bluetooth_nb]}")
            if [ "$bluetooth_nb" -eq 0 ] || [ "${bluetooth_connector[$bluetooth_nb]}" != "${bluetooth_connector[$bluetooth_nb-1]}" ]; then
                echo "<separator label=\"Port ${bluetooth_connector[bluetooth_nb]}\" />"
            elif [ "$z" -gt 0 ]; then
                z=0
                echo "<separator />"
            fi
            ((z++))
            ((bluetooth_nb++))
        fi
        unset bluetooth_model
        bluetooth_model=$(str_str "$line" "Model:")
        if [ ! -z "$bluetooth_model" ]; then
            is_bluetooth=1
            bluetooth_model=$(sanityse_output "$bluetooth_model")
            echo "<item label=\"Modèle : $bluetooth_model\" />"
            ((z++))
        fi
        unset bluetooth_vendor
        bluetooth_vendor=$(str_str "$line" "Vendor:")
        if [ ! -z "$bluetooth_vendor" ]; then
            is_bluetooth=1
            bluetooth_vendor=$(sanityse_output_with_quotes "$bluetooth_vendor")
            echo "<item label=\"Fabricant : $bluetooth_vendor\" />"
            ((z++))
        fi
        unset bluetooth_speed
        bluetooth_speed=$(str_str "$line" "Speed:")
        if [ ! -z "$bluetooth_speed" ]; then
            is_bluetooth=1
            bluetooth_speed=$(sanityse_output "$bluetooth_speed")
            if [[ "$bluetooth_speed" =~ "1.5" ]]; then
                bluetooth_speed="$bluetooth_speed (USB 1.0)"
            elif [[ "$bluetooth_speed" =~ "12" ]]; then
                bluetooth_speed="$bluetooth_speed (USB 1.1)"
            elif [[ "$bluetooth_speed" =~ "480" ]]; then
                bluetooth_speed="$bluetooth_speed (USB 2.0)"
            elif [[ "$bluetooth_speed" =~ "5000" ]]; then
                bluetooth_speed="$bluetooth_speed (USB 3.0)"
            elif [[ "$bluetooth_speed" =~ "10000" ]]; then
                bluetooth_speed="$bluetooth_speed (USB 3.1)"
            fi
            echo "<item label=\"Vitesse : $bluetooth_speed\" />"
            ((z++))
        fi
        unset bluetooth_driver
        bluetooth_driver=$(str_str "$line" "Driver:" | sed 's/\", \"/\",\"/g')
        if [ ! -z "$bluetooth_driver" ]; then
            bluetooth_driver=$(sanityse_output "$bluetooth_driver")
        fi
        unset bluetooth_driver_status_all
        bluetooth_driver_status_all=$(str_str "$line" "Driver Status:")
        unset bluetooth_driver_status bluetooth_status
        if [ ! -z "$bluetooth_driver_status_all" ]; then
            unset status
            while read status; do
                unset driver_new
                if [[ "$status" =~ "is active" ]]; then
                    driver_new=$(echo "$status" | sed 's/is active//g')
                    driver_new=$(sanityse_output "$driver_new")
                    bluetooth_driver_status=$(echo "$bluetooth_driver_status,$driver_new")
                    bluetooth_status=$(echo "$bluetooth_status,$driver_new actif")
                elif [[ "$status" =~ "are active" ]]; then
                    driver_new=$(echo "$status" | sed 's/are active//g')
                    driver_new=$(sanityse_output "$driver_new")
                    bluetooth_driver_status=$(echo "$bluetooth_driver_status,$driver_new")
                    bluetooth_status=$(echo "$bluetooth_status,$driver_new actifs")
                elif [[ "$status" =~ "is not active" ]]; then
                    driver_new=$(echo "$status" | sed 's/is not active//g')
                    driver_new=$(sanityse_output "$driver_new")
                    bluetooth_driver_status=$(echo "$bluetooth_driver_status,$driver_new")
                    bluetooth_status=$(echo "$bluetooth_status,$driver_new inactif")
                elif [[ "$status" =~ "are not active" ]]; then
                    driver_new=$(echo "$status" | sed 's/are not active//g')
                    driver_new=$(sanityse_output "$driver_new")
                    bluetooth_driver_status=$(echo "$bluetooth_driver_status,$driver_new")
                    bluetooth_status=$(echo "$bluetooth_status,$driver_new inactifs")
                fi
                bluetooth_driver_status=$(echo "$bluetooth_driver_status" | sed -e 's/^[,]*//')
                bluetooth_status=$(echo "$bluetooth_status" | sed -e 's/^[,]*//')
            done <<< "$bluetooth_driver_status_all"
        fi
        unset bluetooth_driver_modules
        bluetooth_driver_modules=$(str_str "$line" "Driver Modules:")
        if [ ! -z "$bluetooth_driver_modules" ]; then
            bluetooth_driver_modules=$(sanityse_output "$bluetooth_driver_modules")
        fi
        if [ -z "$bluetooth_driver" ] && [ ! -z "$bluetooth_driver_status" ]; then
            is_bluetooth=1
            echo "<item label=\"Driver(s) : $bluetooth_driver_status\" />"
            ((z++))
        elif [ ! -z "$bluetooth_driver" ] && [ -z "$bluetooth_driver_status" ]; then
            is_bluetooth=1
            echo "<item label=\"Driver(s) : $bluetooth_driver\" />"
            ((z++))
        elif [ ! -z "$bluetooth_driver" ] && [ ! -z "$bluetooth_driver_status" ] && [ "$bluetooth_driver" == "$bluetooth_driver_status" ]; then
            is_bluetooth=1
            echo "<item label=\"Driver(s) : $bluetooth_driver\" />"
            ((z++))
        elif [ ! -z "$bluetooth_driver" ] && [ ! -z "$bluetooth_driver_status" ] && [ "$bluetooth_driver" != "$bluetooth_driver_status" ]; then
            is_bluetooth=1
            bluetooth_driver=$(echo "$bluetooth_driver ($bluetooth_driver_status)")
            echo "<item label=\"Driver(s) : $bluetooth_driver\" />"
            ((z++))
        fi
        if [ ! -z "$bluetooth_driver_modules" ]; then
            is_bluetooth=1
            echo "<item label=\"Module(s) : $bluetooth_driver_modules\" />"
            ((z++))
        fi
        if [ ! -z "$bluetooth_status" ]; then
            is_bluetooth=1
            echo "<item label=\"État : $bluetooth_status\" />"
            ((z++))
        fi
    done <<< "$bluetooths"
    if [ ! -z "$is_bluetooth" ]; then
        echo "<separator />"
        echo "<item label=\"Afficher un aperçu rapide\"><action name=\"Execute\"><command>$(display_file "${default_path}hwinfo --short --bluetooth")</command></action></item>"
        echo "<item label=\"Afficher les informations complètes\"><action name=\"Execute\"><command>$(display_file "${default_path}hwinfo --bluetooth")</command></action></item>"
    fi
fi

if [ -z "$is_bluetooth" ]; then
    echo "<item label=\"Aucun périphérique bluetooth détecté.\" />"
fi

echo "</openbox_pipe_menu>"
