#!/bin/bash
. pipemenu-default-commands
. pipemenu-system-functions

echo "<openbox_pipe_menu>"

unset is_firewire
if [ -e "${default_path}hwinfo" ]; then
    # Requiert l'installation du paquet hwinfo
    unset firewires
    firewires="$(${default_path}hwinfo --firewire | sed -e '$a\ ' | awk -v RS="" -F'\n' -v OFS=" -,-,- " '{$1=$1} 1' | sed -r "s/ +([[:digit:]-]+)$/, \1/; s/ -,-,- +/${end_delimiter}/g" | grep -E '^[0-9]+: ' | sed 's/[^ ]* //' | sed 's/^[^:]*: //g' | sort)"
    firewire_nb=0
    while IFS= read -r line; do
        declare -a firewire_label
        firewire_label[$firewire_nb]=$(str_str "$line" " ")
        if [ ! -z "${firewire_label[$firewire_nb]}" ]; then
            is_firewire=1
            firewire_label[$firewire_nb]=$(sanityse_output "${firewire_label[$firewire_nb]}")
            if [ "$firewire_nb" -eq 0 ] || [ "${firewire_label[$firewire_nb]}" != "${firewire_label[$firewire_nb-1]}" ]; then
                echo "<separator label=\"${firewire_label[firewire_nb]}\" />"
            elif [ "$z" -gt 0 ]; then
                z=0
                echo "<separator />"
            fi
            ((z++))
            ((firewire_nb++))
        fi
        unset firewire_model
        firewire_model=$(str_str "$line" "Model:")
        if [ ! -z "$firewire_model" ]; then
            is_firewire=1
            firewire_model=$(sanityse_output "$firewire_model")
            echo "<item label=\"Modèle : $firewire_model\" />"
        fi
        unset firewire_driver
        firewire_driver=$(str_str "$line" "Driver:" | sed 's/\", \"/\",\"/g')
        if [ ! -z "$firewire_driver" ]; then
            firewire_driver=$(sanityse_output "$firewire_driver")
        fi
        unset firewire_driver_status_all
        firewire_driver_status_all=$(str_str "$line" "Driver Status:")
        unset firewire_driver_status firewire_status
        if [ ! -z "$firewire_driver_status_all" ]; then
            unset status
            while read status; do
                unset driver_new
                if [[ "$status" =~ "is active" ]]; then
                    driver_new=$(echo "$status" | sed 's/is active//g')
                    driver_new=$(sanityse_output "$driver_new")
                    firewire_driver_status=$(echo "$firewire_driver_status,$driver_new")
                    firewire_status=$(echo "$firewire_status,$driver_new actif")
                elif [[ "$status" =~ "are active" ]]; then
                    driver_new=$(echo "$status" | sed 's/are active//g')
                    driver_new=$(sanityse_output "$driver_new")
                    firewire_driver_status=$(echo "$firewire_driver_status,$driver_new")
                    firewire_status=$(echo "$firewire_status,$driver_new actifs")
                elif [[ "$status" =~ "is not active" ]]; then
                    driver_new=$(echo "$status" | sed 's/is not active//g')
                    driver_new=$(sanityse_output "$driver_new")
                    firewire_driver_status=$(echo "$firewire_driver_status,$driver_new")
                    firewire_status=$(echo "$firewire_status,$driver_new inactif")
                elif [[ "$status" =~ "are not active" ]]; then
                    driver_new=$(echo "$status" | sed 's/are not active//g')
                    driver_new=$(sanityse_output "$driver_new")
                    firewire_driver_status=$(echo "$firewire_driver_status,$driver_new")
                    firewire_status=$(echo "$firewire_status,$driver_new inactifs")
                fi
                firewire_driver_status=$(echo "$firewire_driver_status" | sed -e 's/^[,]*//')
                firewire_status=$(echo "$firewire_status" | sed -e 's/^[,]*//')
            done <<< "$firewire_driver_status_all"
        fi
        unset firewire_driver_modules
        firewire_driver_modules=$(str_str "$line" "Driver Modules:")
        if [ ! -z "$firewire_driver_modules" ]; then
            firewire_driver_modules=$(sanityse_output "$firewire_driver_modules")
        fi
        if [ -z "$firewire_driver" ] && [ ! -z "$firewire_driver_status" ]; then
            is_firewire=1
            echo "<item label=\"Driver(s) : $firewire_driver_status\" />"
        elif [ ! -z "$firewire_driver" ] && [ -z "$firewire_driver_status" ]; then
            is_firewire=1
            echo "<item label=\"Driver(s) : $firewire_driver\" />"
        elif [ ! -z "$firewire_driver" ] && [ ! -z "$firewire_driver_status" ] && [ "$firewire_driver" == "$firewire_driver_status" ]; then
            is_firewire=1
            echo "<item label=\"Driver(s) : $firewire_driver\" />"
        elif [ ! -z "$firewire_driver" ] && [ ! -z "$firewire_driver_status" ] && [ "$firewire_driver" != "$firewire_driver_status" ]; then
            is_firewire=1
            firewire_driver=$(echo "$firewire_driver ($firewire_driver_status)")
            echo "<item label=\"Driver(s) : $firewire_driver\" />"
        fi
        if [ ! -z "$firewire_driver_modules" ]; then
            is_firewire=1
            echo "<item label=\"Module(s) : $firewire_driver_modules\" />"
        fi
        if [ ! -z "$firewire_status" ]; then
            is_firewire=1
            echo "<item label=\"État : $firewire_status\" />"
        fi
    done <<< "$firewires"
    if [ ! -z "$is_firewire" ]; then
        echo "<separator />"
        echo "<item label=\"Afficher un aperçu rapide\"><action name=\"Execute\"><command>$(display_file "${default_path}hwinfo --short --firewire")</command></action></item>"
        echo "<item label=\"Afficher les informations complètes\"><action name=\"Execute\"><command>$(display_file "${default_path}hwinfo --firewire")</command></action></item>"
    fi
fi

if [ -z "$is_firewire" ]; then
    echo "<item label=\"Aucun périphérique FireWire détecté.\" />"
fi

echo "</openbox_pipe_menu>"
